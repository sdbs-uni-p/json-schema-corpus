{
  "$schema": "http://json-schema.org/draft-04/schema",
  "id": "urn:x-jubatus:api:classifier",
  "definitions": {
    "estimate_result": {
      "title": "estimate_result",
      "description": "Represents a result of classification.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "title": "label",
          "description": "Represents an estimated label.",
          "type": "string"
        },
        {
          "title": "score",
          "description": "Represents a probability value for the label. Higher score value means that the estimated label is more confident.",
          "type": "number"
        }
      ],
      "additionalItems": false
    },
    "labeled_datum": {
      "title": "labeled_datum",
      "description": "Represents a datum with its label.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "title": "label",
          "description": "Represents a label of this datum.",
          "type": "string"
        },
        {
          "title": "data",
          "description": "Represents a datum.",
          "$ref": "urn:x-jubatus:api:common#/definitions/datum"
        }
      ],
      "additionalItems": false
    }
  },
  "title": "classifier",
  "properties": {
    "train": {
      "title": "train",
      "description": "Trains and updates the model. labeled_datum is a tuple of datum and its label. This API is designed to accept bulk update with list of labeled_datum.",
      "properties": {
        "return": {
          "description": "Number of trained datum (i.e., the length of the data)",
          "type": "integer"
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "data",
              "description": "list of tuple of label and datum",
              "type": "array",
              "items": {
                "$ref": "#/definitions/labeled_datum"
              }
            }
          ],
          "additionalItems": false
        }
      }
    },
    "classify": {
      "title": "classify",
      "description": "Estimates labels from given data. This API is designed to accept bulk classification with list of datum.",
      "properties": {
        "return": {
          "description": "List of list of estimate_result, in order of given datum",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/estimate_result"
            }
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "data",
              "description": "list of datum to classify",
              "type": "array",
              "items": {
                "$ref": "urn:x-jubatus:api:common#/definitions/datum"
              }
            }
          ],
          "additionalItems": false
        }
      }
    },
    "get_labels": {
      "title": "get_labels",
      "description": "Returns the number of trained data for each label. If method is NN , the number of trained data that are deleted by unlearner is not include in this count.",
      "properties": {
        "return": {
          "description": "Pairs of label and the number of trained data",
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "number"
            }
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    },
    "set_label": {
      "title": "set_label",
      "description": "Append new label. If the label is already exist, it fails. New label is add when label found in train method argument, too.",
      "properties": {
        "return": {
          "description": "True if the new label was not exist. False if the label already exists.",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "new_label",
              "description": "name of new label",
              "type": "string"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "delete_label": {
      "title": "delete_label",
      "description": "Deleting label. True if jubatus success to delete. False if the label is not exists.",
      "properties": {
        "return": {
          "description": "True if jubatus success to delete label. False if the label is not exists.",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "target_label",
              "description": "deleting label name",
              "type": "string"
            }
          ],
          "additionalItems": false
        }
      }
    }
  }
}