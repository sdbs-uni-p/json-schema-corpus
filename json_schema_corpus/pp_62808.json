{
  "$schema": "http://json-schema.org/draft-04/schema",
  "id": "urn:x-jubatus:api:nearest_neighbor",
  "definitions": {
    "id_with_score": {
      "title": "id_with_score",
      "description": "Represents ID with its score.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "title": "id",
          "description": "Data ID.",
          "type": "string"
        },
        {
          "title": "score",
          "description": "Score.",
          "type": "number"
        }
      ],
      "additionalItems": false
    }
  },
  "title": "nearest_neighbor",
  "properties": {
    "set_row": {
      "title": "set_row",
      "description": "Updates the row whose id is id with given row. If the row with the same id already exists, the row is overwritten with row (note that this behavior is different from that of recommender). Otherwise, new row entry will be created. If the server that manages the row and the server that received this RPC request are same, this operation is reflected instantly. If not, update operation is reflected after mix.",
      "properties": {
        "return": {
          "description": "True if this function updates models successfully",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "title": "id",
              "description": "row ID",
              "type": "string"
            },
            {
              "title": "d",
              "description": "datum for the row",
              "$ref": "urn:x-jubatus:api:common#/definitions/datum"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "neighbor_row_from_id": {
      "title": "neighbor_row_from_id",
      "description": "Returns size rows (at maximum) that have most similar datum to id and their distance values.",
      "properties": {
        "return": {
          "description": "row IDs that are the nearest to the row id and their distance values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/id_with_score"
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "title": "id",
              "description": "row ID in the nearest neighbor search table",
              "type": "string"
            },
            {
              "title": "size",
              "description": "number of rows to be returned",
              "type": "integer"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "neighbor_row_from_datum": {
      "title": "neighbor_row_from_datum",
      "description": "Returns size rows (at maximum) of which datum are most similar to query and their distance values.",
      "properties": {
        "return": {
          "description": "row IDs that are the nearest to query and their distance values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/id_with_score"
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "title": "query",
              "description": "datum for nearest neighbor search",
              "$ref": "urn:x-jubatus:api:common#/definitions/datum"
            },
            {
              "title": "size",
              "description": "number of rows to be returned",
              "type": "integer"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "similar_row_from_id": {
      "title": "similar_row_from_id",
      "description": "Returns ret_num rows (at maximum) that have most similar datum to id and their similarity values.",
      "properties": {
        "return": {
          "description": "row IDs that are the nearest to the row id and their similarity values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/id_with_score"
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "title": "id",
              "description": "row ID in the nearest neighbor search table",
              "type": "string"
            },
            {
              "title": "ret_num",
              "description": "number of rows to be returned",
              "type": "integer"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "similar_row_from_datum": {
      "title": "similar_row_from_datum",
      "description": "Returns ret_num rows (at maximum) of which datum are most similar to query and their similarity values.",
      "properties": {
        "return": {
          "description": "row IDs that are the nearest to query and their similarity values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/id_with_score"
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "title": "query",
              "description": "datum for nearest neighbor search",
              "$ref": "urn:x-jubatus:api:common#/definitions/datum"
            },
            {
              "title": "ret_num",
              "description": "number of rows to be returned",
              "type": "integer"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "get_all_rows": {
      "title": "get_all_rows",
      "description": "Returns the list of all row IDs.",
      "properties": {
        "return": {
          "description": "list of all row IDs",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    }
  }
}