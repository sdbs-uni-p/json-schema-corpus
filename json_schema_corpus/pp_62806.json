{
  "$schema": "http://json-schema.org/draft-04/schema",
  "id": "urn:x-jubatus:api:common",
  "definitions": {
    "datum": {
      "title": "datum",
      "description": "Represents a set of data used for machine learning in Jubatus.",
      "type": "array",
      "minItems": 1,
      "maxItems": 3,
      "items": [
        {
          "title": "string_values",
          "description": "Input data represented in string. It is represented as key-value pairs of data. Name of keys cannot contain \u201c$\u201d sign.",
          "type": "array",
          "default": [],
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ],
            "additionalItems": false
          }
        },
        {
          "title": "num_values",
          "description": "Input data represented in numeric value. It is represented as key-value pairs of data.",
          "type": "array",
          "default": [],
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "additionalItems": false
          }
        },
        {
          "title": "binary_values",
          "description": "Input data represented in binary value. It is represented as key-value pairs of data.",
          "type": "array",
          "default": [],
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "additionalItems": false
          }
        }
      ],
      "additionalItems": false
    }
  },
  "properties": {
    "save": {
      "title": "save",
      "description": "Store the learing model to the local disk at ALL servers.",
      "properties": {
        "return": {
          "description": "Path to the saved model for each server. The key of the map is in form of ipaddr_portnumber.",
          "type": "object"
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "id",
              "description": "file name to save",
              "type": "string"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "load": {
      "title": "load",
      "description": "Restore the saved model from local disk at ALL servers.",
      "properties": {
        "return": {
          "description": "True if this function loads files successfully at all servers",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "title": "id",
              "description": "file name to load",
              "type": "string"
            }
          ],
          "additionalItems": false
        }
      }
    },
    "clear": {
      "title": "clear",
      "description": "Completely clears the model at ALL servers.",
      "properties": {
        "return": {
          "description": "True when the model was cleared successfully",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    },
    "get_config": {
      "title": "get_config",
      "description": "Returns server configuration from a server. For format of configuration, see API reference of each services.",
      "properties": {
        "return": {
          "description": "server configuration set on initialization",
          "type": "string"
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    },
    "get_status": {
      "title": "get_status",
      "description": "Returns server status from ALL servers. Each server is represented by a pair of IP address and port.",
      "properties": {
        "return": {
          "description": "Internal state for each servers. The key of most outer map is in form of ipaddr_portnumber.",
          "type": "object"
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    },
    "do_mix": {
      "title": "do_mix",
      "description": "Force cluster to fire mix. Call this RPC to Jubatus server directly. When you call this to proxy, RPC error will be raised.",
      "properties": {
        "return": {
          "description": "True when model mixed successfully",
          "type": "boolean"
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    },
    "get_proxy_status": {
      "title": "get_proxy_status",
      "description": "Returns proxy status. This is an RPC method for proxy. When you use this for server, RPC error will be raised.",
      "properties": {
        "return": {
          "description": "Internal state for proxy. The key of most outer map is in form of ipaddr_portnumber.",
          "type": "object"
        },
        "arguments": {
          "type": "array",
          "minItems": 0,
          "maxItems": 0,
          "additionalItems": false
        }
      }
    }
  }
}