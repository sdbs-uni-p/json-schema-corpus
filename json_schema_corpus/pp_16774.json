{
  "title": "JSON schema for the TSLint configuration files",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "additionalProperties": true,
  "definitions": {
    "ruledefinitions": {
      "properties": {
        "ban": {
          "description": "Bans the use of specific functions",
          "type": "array",
          "items": {
            "type": [
              "boolean",
              "array"
            ]
          }
        },
        "class-name": {
          "description": "Enforces PascalCased class and interface names",
          "type": "boolean"
        },
        "comment-format": {
          "description": "Enforces rules for single-line comments",
          "type": "array",
          "items": {
            "enum": [
              true,
              "check-space",
              "check-lowercase"
            ]
          }
        },
        "curly": {
          "description": "Enforces braces for if/for/do/while statements",
          "type": "boolean"
        },
        "eofline": {
          "description": "Enforces the file to end with a newline",
          "type": "boolean"
        },
        "forin": {
          "description": "Enforces a for...in  statement to be filtered with an if statement",
          "type": "boolean"
        },
        "indent": {
          "description": "Enforces consistent indentation levels",
          "type": "array",
          "items": {
            "type": [
              "boolean",
              "integer"
            ]
          }
        },
        "interface-name": {
          "description": "Enforces the rule that interface names must begin with a capital 'I'",
          "type": "boolean"
        },
        "jsdoc-format": {
          "description": "Enforces basic format rules for jsdoc comments",
          "type": "boolean"
        },
        "label-position": {
          "description": "Enforces labels only on sensible statements",
          "type": "boolean"
        },
        "label-undefined": {
          "description": "Checks that labels are defined before usage",
          "type": "boolean"
        },
        "max-line-length": {
          "description": "Sets the maximum length of a line",
          "type": "array"
        },
        "no-any": {
          "description": "diallows usages of any as a type decoration",
          "type": "boolean"
        },
        "no-arg": {
          "description": "Disallows access to arguments.callee",
          "type": "boolean"
        },
        "no-bitwise": {
          "description": "Disallows bitwise operators",
          "type": "boolean"
        },
        "no-console": {
          "description": "Disallows access to the specified functions on console",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "debug",
              "info",
              "time",
              "timeEnd",
              "trace"
            ]
          }
        },
        "no-consecutive-blank-lines": {
          "description": "Disallows having more than one blank line in a row in a file",
          "type": "boolean"
        },
        "no-construct": {
          "description": "Disallows access to the constructors of String, Number and Boolean",
          "type": "boolean"
        },
        "no-constructor-vars": {
          "description": "Disallows the `public` and `private` modifiers for constructor parameters",
          "type": "boolean"
        },
        "no-debugger": {
          "description": "Disallows debugger statements",
          "type": "boolean"
        },
        "no-duplicate-key": {
          "description": "Disallows duplicate keys in object literals",
          "type": "boolean"
        },
        "no-duplicate-variable": {
          "description": "Disallows duplicate variable declarations",
          "type": "boolean"
        },
        "no-empty": {
          "description": "Disallows empty blocks",
          "type": "boolean"
        },
        "no-eval": {
          "description": "Disallows eval function invocations",
          "type": "boolean"
        },
        "no-string-literal": {
          "description": "Disallows object access via string literals",
          "type": "boolean"
        },
        "no-switch-case-fall-through": {
          "description": "Disallows falling through case statements",
          "type": "boolean"
        },
        "no-trailing-comma": {
          "description": "Disallows trailing comma within object literals",
          "type": "boolean"
        },
        "no-trailing-whitespace": {
          "description": "Disallows trailing whitespace at the end of a line",
          "type": "boolean"
        },
        "no-unused-expression": {
          "description": "Disallows unused expression statements",
          "type": "boolean"
        },
        "no-unused-variable": {
          "description": "Disallows unused imports, variables, functions and private class members",
          "type": [
            "array",
            "boolean"
          ],
          "items": {
            "type": [
              "boolean",
              "string"
            ],
            "enum": [
              true,
              false,
              "check-parameters"
            ]
          }
        },
        "no-unreachable": {
          "description": "Disallows unreachable code after break, catch, throw and return statements",
          "type": "boolean"
        },
        "no-use-before-declare": {
          "description": "Disallows usage of variables before their declaration",
          "type": "boolean"
        },
        "no-var-requires": {
          "description": "Disallows the use of require statements except in import statements",
          "type": "boolean"
        },
        "one-line": {
          "description": "Enforces the specified tokens to be on the same line as the expression preceding it",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "check-open-brace",
              "check-catch",
              "check-else",
              "check-whitespace"
            ]
          }
        },
        "quotemark": {
          "description": "Enforces consistent single or double quoted string literals",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "double",
              "single"
            ]
          }
        },
        "radix": {
          "description": "Enforces the radix parameter of parseInt",
          "type": "boolean"
        },
        "semicolon": {
          "description": "Enforces semicolons at the end of every statement",
          "type": "boolean"
        },
        "triple-equals": {
          "description": "Enforces === and !== in favor of == and !=",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "allow-null-check"
            ]
          }
        },
        "typedef": {
          "description": "Enforces type definitions to exist",
          "type": "array",
          "items": {
            "enum": [
              true,
              "callSignature",
              "indexSignature",
              "parameter",
              "propertySignature",
              "variableDeclarator"
            ]
          }
        },
        "typedef-whitespace": {
          "description": "Enforces spacing whitespace for type definitions",
          "type": "array",
          "items": {
            "type": [
              "array",
              "boolean",
              "string"
            ]
          }
        },
        "use-strict": {
          "description": "Enforces ECMAScript 5's strict mode",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "check-module",
              "check-function"
            ]
          }
        },
        "variable-name": {
          "description": "Allows only camelCased or UPPER_CASED variable names",
          "type": [
            "array",
            "boolean"
          ],
          "items": {
            "enum": [
              true,
              false,
              "allow-leading-underscore"
            ]
          }
        },
        "whitespace": {
          "description": "Enforces spacing whitespace",
          "type": "array",
          "items": {
            "enum": [
              true,
              false,
              "check-branch",
              "check-decl",
              "check-operator",
              "check-separator",
              "check-type"
            ]
          }
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "rules": {
      "$ref": "#/definitions/ruledefinitions"
    }
  }
}