{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "yotta target.json schema",
  "properties": {
    "name": {
      "$ref": "#/definitions/targetname"
    },
    "version": {
      "$ref": "#/definitions/semver"
    },
    "license": {
      "$ref": "#/definitions/license"
    },
    "licenses": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/license"
      }
    },
    "inherits": {
      "$ref": "#/definitions/inheritsMap"
    },
    "similarTo": {
      "comment": "deprecated",
      "type": "array",
      "items": {
        "$ref": "#/definitions/name"
      }
    },
    "toolchain": {
      "$ref": "#/definitions/path"
    },
    "private": {
      "type": "boolean"
    },
    "description": {
      "type": "string",
      "minLength": 1,
      "maxLength": 2000
    },
    "keywords": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]*",
        "minLength": 1,
        "maxLength": 100
      }
    },
    "author": {
      "oneOf": [
        {
          "$ref": "#/definitions/person"
        },
        {
          "$ref": "#/definitions/personObject"
        }
      ]
    },
    "contributors": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/person"
          },
          {
            "$ref": "#/definitions/personObject"
          }
        ]
      }
    },
    "maintainers": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/person"
          },
          {
            "$ref": "#/definitions/personObject"
          }
        ]
      }
    },
    "homepage": {
      "$ref": "#/definitions/httpURL"
    },
    "repository": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "git",
            "hg",
            "svn"
          ]
        },
        "url": {
          "$ref": "#/definitions/repositoryURL"
        }
      },
      "required": [
        "type",
        "url"
      ]
    },
    "bugs": {
      "oneOf": [
        {
          "$ref": "#/definitions/httpURL"
        },
        {
          "$ref": "#/definitions/bugsObject"
        }
      ]
    },
    "scripts": {
      "type": "object",
      "patternProperties": {
        "^prePublish$": {
          "comment": "Runs before this module is published. Return non-zero to prevent publishing.",
          "$ref": "#/definitions/command"
        },
        "^postPublish$": {
          "comment": "Runs after this module has been published. Put your twitter posting script here.",
          "$ref": "#/definitions/command"
        },
        "^postInstall$": {
          "comment": "Runs once after a module is downloaded into yotta_modules, or downloaded as a top-level module.",
          "$ref": "#/definitions/command"
        },
        "^preVersion$": {
          "comment": "Runs before the yotta version command increments the version number. Return non-zero to prevent continuing.",
          "$ref": "#/definitions/command"
        },
        "^postVersion$": {
          "comment": "Runs after the yotta version command has incremented the version number (but BEFORE anything is tagged or committed to git/hg). Return non-zero to prevent continuing.",
          "$ref": "#/definitions/command"
        },
        "^debug$": {
          "comment": "script used to load programs for debugging. The program to be loaded is expanded from $program or available as environment varianble YOTTA_PROGRAM",
          "$ref": "#/definitions/command"
        },
        "^test$": {
          "comment": "script used to run programs for testing. The program to be loaded is expanded from $program or available as environment varianble YOTTA_PROGRAM",
          "$ref": "#/definitions/command"
        },
        "^start$": {
          "comment": "script used to start an application. The program to be loaded is expanded from $program or available as environment varianble YOTTA_PROGRAM",
          "$ref": "#/definitions/command"
        }
      },
      "additionalProperties": true
    },
    "debug": {
      "comment": "deprecated",
      "$ref": "#/definitions/command"
    },
    "debugServer": {
      "comment": "deprecated",
      "$ref": "#/definitions/command"
    },
    "config": {
      "$ref": "#definitions/configData"
    },
    "yotta": {
      "comment": "specification on the yotta versions that this target will work with (recommend >=x.y.z)",
      "$ref": "#/definitions/semverSpecification"
    }
  },
  "definitions": {
    "name": {
      "type": "string",
      "pattern": "^[a-z]+[a-z0-9-]*$",
      "minLength": 2,
      "maxLength": 64
    },
    "targetname": {
      "type": "string",
      "pattern": "^[a-z]+[a-z0-9+-]*$",
      "minLength": 2,
      "maxLength": 64,
      "not": {
        "enum": [
          "test",
          "source",
          "yotta_modules",
          "yotta_targets",
          "include"
        ]
      }
    },
    "person": {
      "type": "string",
      "minLength": 0,
      "maxLength": 300
    },
    "personObject": {
      "type": "object",
      "required": [
        "name",
        "email"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 300
        },
        "email": {
          "$ref": "#/definitions/email"
        },
        "url": {
          "$ref": "#/definitions/httpUrl"
        }
      }
    },
    "email": {
      "type": "string",
      "maxLength": 120,
      "pattern": "^[^@]+@[^@]+$"
    },
    "httpURL": {
      "type": "string",
      "maxLength": 1200,
      "comment": "!!! TODO: pattern"
    },
    "repositoryURL": {
      "oneOf": [
        {
          "$ref": "#/definitions/gitRepositoryUrl"
        },
        {
          "$ref": "#/definitions/hgRepositoryUrl"
        },
        {
          "$ref": "#/definitions/svnRepositoryUrl"
        }
      ]
    },
    "gitRepositoryUrl": {
      "type": "string",
      "minLength": 6,
      "maxLength": 1200,
      "pattern": "^(git[+a-zA-Z-]*:.*|.*\\.git|.*git@.*github\\.com.*)$"
    },
    "hgRepositoryUrl": {
      "type": "string",
      "minLength": 6,
      "maxLength": 1200,
      "pattern": "^(hg[+a-zA-Z-]*:.*|.*\\.hg)$"
    },
    "svnRepositoryUrl": {
      "type": "string",
      "minLength": 6,
      "maxLength": 1200,
      "pattern": "^svn[+a-zA-Z-]*:.*$"
    },
    "license": {
      "oneOf": [
        {
          "$ref": "#/definitions/licenseID"
        },
        {
          "$ref": "#/definitions/licenseObject"
        }
      ]
    },
    "licenseID": {
      "type": "string",
      "minLength": 3,
      "maxLength": 1000
    },
    "licenseObject": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/spdxIdentifier"
        },
        "url": {
          "$ref": "#/definitions/httpURL"
        }
      },
      "required": [
        "type"
      ]
    },
    "spdxIdentifier": {
      "comment": "This is meant to be a SPDX identifier for the license, but might also be the text of a proprietary license.",
      "type": "string",
      "minLength": 3,
      "maxLength": 5000
    },
    "bugsObject": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/httpURL"
        },
        "email": {
          "$ref": "#/definitions/email"
        }
      },
      "minProperties": 1
    },
    "path": {
      "type": "string",
      "minLength": 1,
      "maxLength": 260,
      "pattern": "^[a-zA-Z0-9 ()._/-]*$"
    },
    "inheritsMap": {
      "type": "object",
      "patternProperties": {
        "^[a-z]+[a-z0-9-]{1,63}$": {
          "anyOf": [
            {
              "$ref": "#/definitions/githubDepSource"
            },
            {
              "$ref": "#/definitions/gitDepSource"
            },
            {
              "$ref": "#/definitions/hgDepSource"
            },
            {
              "$ref": "#/definitions/semverSpecification"
            }
          ]
        }
      },
      "minProperties": 0,
      "maxProperties": 1,
      "additionalProperties": false
    },
    "githubDepSource": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+(#[.*])?$",
      "minLength": 3,
      "maxLength": 200
    },
    "gitDepSource": {
      "comment": "!!! TODO: pattern",
      "type": "string",
      "minLength": 5,
      "maxLength": 1200
    },
    "hgDepSource": {
      "comment": "!!! TODO: pattern",
      "type": "string",
      "minLength": 5,
      "maxLength": 1200
    },
    "semver": {
      "type": "string",
      "pattern": "^(0|[1-9][0-9]*)[.](0|[1-9][0-9]*)[.](0|[1-9][0-9]*)(-[a-zA-Z0-9]+[a-zA-Z0-9-]*([.][a-zA-Z0-9]+[a-zA-Z0-9-]*)*)?([+][a-zA-Z0-9]+[a-zA-Z0-9-]*([.][a-zA-Z0-9]+[a-zA-Z0-9-]*)*)?$"
    },
    "semverSpecification": {
      "comment": "!!! TODO: pattern",
      "type": "string",
      "pattern": ".*"
    },
    "command": {
      "comment": "a command is either an array of parts, or a single string (which will be split into parts according to normal shell splitting rules)",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 0,
            "maxLength": 3000
          }
        },
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 3000
        }
      ]
    },
    "configValues": {
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "configData": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/configValues"
          },
          {
            "$ref": "#/definitions/configData"
          }
        ]
      }
    }
  },
  "required": [
    "name",
    "version"
  ],
  "oneOf": [
    {
      "required": [
        "license"
      ]
    },
    {
      "required": [
        "licenses"
      ]
    }
  ]
}